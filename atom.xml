<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://guozixu2001.github.io/</id>
    <title>Rocco&apos;s Cache</title>
    <updated>2022-06-06T09:45:33.156Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://guozixu2001.github.io/"/>
    <link rel="self" href="https://guozixu2001.github.io/atom.xml"/>
    <subtitle>Rocco写东西的Cache</subtitle>
    <logo>https://guozixu2001.github.io/images/avatar.png</logo>
    <icon>https://guozixu2001.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Rocco&apos;s Cache</rights>
    <entry>
        <title type="html"><![CDATA[浅谈Java中的设计模式]]></title>
        <id>https://guozixu2001.github.io/post/qian-tan-java-zhong-de-she-ji-mo-shi/</id>
        <link href="https://guozixu2001.github.io/post/qian-tan-java-zhong-de-she-ji-mo-shi/">
        </link>
        <updated>2022-06-01T09:28:22.000Z</updated>
        <content type="html"><![CDATA[<p>设计模式，很多人都会觉得这个概念很熟悉，会想到单例模式、工厂模式等等，但是似乎又说不出来什么，说不上它的核心思想和设计原则。其实我们的项目中，为了代码复用，增加可维护性，很多地方都用到了设计模式，它的思想和设计精髓贯穿每一个系统设计。<br>
今天整理了一下，发现也只不过用到了常用的几种设计模式，还有很多我闻所未闻，甚至连模式的名字都没有听过，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。在具体到每一个设计模式的实例之前，我觉得有必要先简单认识和了解一下什么是设计模式，先对这些概念有一个大概的印象，然后再深入下去。</p>
<h1 id="设计模式简介">设计模式简介</h1>
<p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>
<h1 id="设计模式基本要素">设计模式基本要素</h1>
<p>设计模式主要有四个基本要素：</p>
<ul>
<li>模式名称(pattern name)：一个助记名，它用以两个词来描述模式的问题、解决方案和效果。</li>
<li>问题(problem):描述了应该在何时使用模式。</li>
<li>解决方案(solution):描述了设计的组成成分，他们之间的相互关系及各自的职责和协助方式。</li>
<li>效果(consequendes):描述了应用的效果及使用模式应权衡的问题。</li>
</ul>
<h1 id="设计模式分类">设计模式分类</h1>
<p>设计模式主要分为三大类：</p>
<h2 id="创建型模式">创建型模式</h2>
<p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。主要有以下5种模式：</p>
<ul>
<li>工厂方法模式（Factory Pattern）</li>
<li>抽象工厂模式（Abstract Factory Pattern）</li>
<li>单例模式（Singleton Pattern）</li>
<li>建造者模式（Builder Pattern）</li>
<li>原型模式（Prototype Pattern）</li>
</ul>
<h2 id="结构型模式">结构型模式</h2>
<p>用于描述如何将类或对象按某种布局组成更大的结构。<br>
主要有以下7种模式：</p>
<ul>
<li>适配器模式（Adapter Pattern）</li>
<li>装饰器模式（Decorator Pattern）</li>
<li>代理模式（Proxy Pattern）</li>
<li>外观模式（Facade Pattern）</li>
<li>桥接模式（Bridge Pattern）</li>
<li>组合模式（Composite Pattern）</li>
<li>享元模式（Flyweight Pattern）</li>
<li>行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。<br>
主要有以下11种模式:</li>
<li>策略模式（Strategy Pattern）</li>
<li>模板方法模式（Template Pattern）</li>
<li>观察者模式（Observer Pattern）</li>
<li>迭代器模式（Iterator Pattern）</li>
<li>责任链模式（Chain of Responsibility Pattern）</li>
<li>命令模式（Command Pattern）</li>
<li>备忘录模式（Memento Pattern）</li>
<li>状态模式（State Pattern）</li>
<li>访问者模式（Visitor Pattern）</li>
<li>中介者模式（Mediator Pattern）</li>
<li>解释器模式（Interpreter Pattern）</li>
</ul>
<h1 id="设计模式遵循原则">设计模式遵循原则</h1>
<p>设计模式遵循6大原则，分别为：</p>
<ul>
<li>开闭原则（Open Close Principle）：对扩展开放，对修改关闭。</li>
<li>里氏代换原则（Liskov Substitution Principle）：只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</li>
<li>依赖倒转原则（Dependence Inversion Principle）：这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。</li>
<li>接口隔离原则（Interface Segregation Principle）：使用多个隔离的接口来降低耦合度。</li>
<li>迪米特法则（最少知道原则）（Demeter Principle）:一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</li>
<li>合成复用原则（Composite Reuse Principle）:原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://guozixu2001.github.io/post/about/</id>
        <link href="https://guozixu2001.github.io/post/about/">
        </link>
        <updated>2020-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<h2 id="很高兴遇见你">很高兴遇见你！🤝</h2>
<blockquote>
<p>Programming machines to do web and graphics stuff.<br>
Lifelong learner, book lover.<br>
Interested in accessibility and all kinds of things.</p>
</blockquote>
<h2 id="联系我呀">📬 联系我呀</h2>
<blockquote>
<p>guozixu2001@gmail.com</p>
</blockquote>
]]></content>
    </entry>
</feed>